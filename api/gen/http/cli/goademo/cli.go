// Code generated by goa v3.11.1, DO NOT EDIT.
//
// goademo HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	democ "github.com/sevein/goademo/api/gen/http/demo/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `demo (show|plain-list-0|plain-list-1|list0|list1|list2|list3)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` demo show --id 8108857780215730865` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		demoFlags = flag.NewFlagSet("demo", flag.ContinueOnError)

		demoShowFlags  = flag.NewFlagSet("show", flag.ExitOnError)
		demoShowIDFlag = demoShowFlags.String("id", "REQUIRED", "")

		demoPlainList0Flags = flag.NewFlagSet("plain-list-0", flag.ExitOnError)

		demoPlainList1Flags = flag.NewFlagSet("plain-list-1", flag.ExitOnError)

		demoList0Flags = flag.NewFlagSet("list0", flag.ExitOnError)

		demoList1Flags = flag.NewFlagSet("list1", flag.ExitOnError)

		demoList2Flags = flag.NewFlagSet("list2", flag.ExitOnError)

		demoList3Flags = flag.NewFlagSet("list3", flag.ExitOnError)
	)
	demoFlags.Usage = demoUsage
	demoShowFlags.Usage = demoShowUsage
	demoPlainList0Flags.Usage = demoPlainList0Usage
	demoPlainList1Flags.Usage = demoPlainList1Usage
	demoList0Flags.Usage = demoList0Usage
	demoList1Flags.Usage = demoList1Usage
	demoList2Flags.Usage = demoList2Usage
	demoList3Flags.Usage = demoList3Usage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "demo":
			svcf = demoFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "demo":
			switch epn {
			case "show":
				epf = demoShowFlags

			case "plain-list-0":
				epf = demoPlainList0Flags

			case "plain-list-1":
				epf = demoPlainList1Flags

			case "list0":
				epf = demoList0Flags

			case "list1":
				epf = demoList1Flags

			case "list2":
				epf = demoList2Flags

			case "list3":
				epf = demoList3Flags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "demo":
			c := democ.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = democ.BuildShowPayload(*demoShowIDFlag)
			case "plain-list-0":
				endpoint = c.PlainList0()
				data = nil
			case "plain-list-1":
				endpoint = c.PlainList1()
				data = nil
			case "list0":
				endpoint = c.List0()
				data = nil
			case "list1":
				endpoint = c.List1()
				data = nil
			case "list2":
				endpoint = c.List2()
				data = nil
			case "list3":
				endpoint = c.List3()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// demoUsage displays the usage of the demo command and its subcommands.
func demoUsage() {
	fmt.Fprintf(os.Stderr, `Service is the demo service interface.
Usage:
    %[1]s [globalflags] demo COMMAND [flags]

COMMAND:
    show: Show implements show.
    plain-list-0: PlainList0 implements plain-list-0.
    plain-list-1: PlainList1 implements plain-list-1.
    list0: List0 implements list0.
    list1: List1 implements list1.
    list2: List2 implements list2.
    list3: List3 implements list3.

Additional help:
    %[1]s demo COMMAND --help
`, os.Args[0])
}
func demoShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo show -id UINT

Show implements show.
    -id UINT: 

Example:
    %[1]s demo show --id 8108857780215730865
`, os.Args[0])
}

func demoPlainList0Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo plain-list-0

PlainList0 implements plain-list-0.

Example:
    %[1]s demo plain-list-0
`, os.Args[0])
}

func demoPlainList1Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo plain-list-1

PlainList1 implements plain-list-1.

Example:
    %[1]s demo plain-list-1
`, os.Args[0])
}

func demoList0Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo list0

List0 implements list0.

Example:
    %[1]s demo list0
`, os.Args[0])
}

func demoList1Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo list1

List1 implements list1.

Example:
    %[1]s demo list1
`, os.Args[0])
}

func demoList2Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo list2

List2 implements list2.

Example:
    %[1]s demo list2
`, os.Args[0])
}

func demoList3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] demo list3

List3 implements list3.

Example:
    %[1]s demo list3
`, os.Args[0])
}
