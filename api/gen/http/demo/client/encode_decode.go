// Code generated by goa v3.11.1, DO NOT EDIT.
//
// demo HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	demo "github.com/sevein/goademo/api/gen/demo"
	demoviews "github.com/sevein/goademo/api/gen/demo/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "demo" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*demo.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("demo", "show", "*demo.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowDemoPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the demo show
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "show", err)
			}
			p := NewShowGoademoThingOK(&body)
			view := "extended"
			vres := &demoviews.GoademoThing{Projected: p, View: view}
			if err = demoviews.ValidateGoademoThing(vres); err != nil {
				return nil, goahttp.ErrValidationError("demo", "show", err)
			}
			res := demo.NewGoademoThing(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildPlainList0Request instantiates a HTTP request object with method and
// path set to call the "demo" service "plain-list-0" endpoint
func (c *Client) BuildPlainList0Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PlainList0DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "plain-list-0", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePlainList0Response returns a decoder for responses returned by the
// demo plain-list-0 endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePlainList0Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PlainList0ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "plain-list-0", err)
			}
			p := NewPlainList0GoademoThingCollectionOK(body)
			view := "default"
			vres := demoviews.GoademoThingCollection{Projected: p, View: view}
			if err = demoviews.ValidateGoademoThingCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("demo", "plain-list-0", err)
			}
			res := demo.NewGoademoThingCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "plain-list-0", resp.StatusCode, string(body))
		}
	}
}

// BuildPlainList1Request instantiates a HTTP request object with method and
// path set to call the "demo" service "plain-list-1" endpoint
func (c *Client) BuildPlainList1Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PlainList1DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "plain-list-1", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePlainList1Response returns a decoder for responses returned by the
// demo plain-list-1 endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePlainList1Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PlainList1ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "plain-list-1", err)
			}
			p := NewPlainList1GoademoThingCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := demoviews.GoademoThingCollection{Projected: p, View: view}
			if err = demoviews.ValidateGoademoThingCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("demo", "plain-list-1", err)
			}
			res := demo.NewGoademoThingCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "plain-list-1", resp.StatusCode, string(body))
		}
	}
}

// BuildList0Request instantiates a HTTP request object with method and path
// set to call the "demo" service "list0" endpoint
func (c *Client) BuildList0Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: List0DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "list0", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeList0Response returns a decoder for responses returned by the demo
// list0 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeList0Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body List0ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "list0", err)
			}
			err = ValidateList0ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("demo", "list0", err)
			}
			res := NewList0ResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "list0", resp.StatusCode, string(body))
		}
	}
}

// BuildList1Request instantiates a HTTP request object with method and path
// set to call the "demo" service "list1" endpoint
func (c *Client) BuildList1Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: List1DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "list1", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeList1Response returns a decoder for responses returned by the demo
// list1 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeList1Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body List1ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "list1", err)
			}
			err = ValidateList1ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("demo", "list1", err)
			}
			res := NewList1ResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "list1", resp.StatusCode, string(body))
		}
	}
}

// BuildList2Request instantiates a HTTP request object with method and path
// set to call the "demo" service "list2" endpoint
func (c *Client) BuildList2Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: List2DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "list2", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeList2Response returns a decoder for responses returned by the demo
// list2 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeList2Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body List2ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "list2", err)
			}
			err = ValidateList2ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("demo", "list2", err)
			}
			res := NewList2ResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "list2", resp.StatusCode, string(body))
		}
	}
}

// BuildList3Request instantiates a HTTP request object with method and path
// set to call the "demo" service "list3" endpoint
func (c *Client) BuildList3Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: List3DemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "list3", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeList3Response returns a decoder for responses returned by the demo
// list3 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeList3Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body List3ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "list3", err)
			}
			err = ValidateList3ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("demo", "list3", err)
			}
			res := NewList3ResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "list3", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGoademoThingResponseToDemoviewsGoademoThingView builds a value of
// type *demoviews.GoademoThingView from a value of type *GoademoThingResponse.
func unmarshalGoademoThingResponseToDemoviewsGoademoThingView(v *GoademoThingResponse) *demoviews.GoademoThingView {
	res := &demoviews.GoademoThingView{
		ID:   v.ID,
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}

// unmarshalGoademoThingResponseBodyToDemoGoademoThing builds a value of type
// *demo.GoademoThing from a value of type *GoademoThingResponseBody.
func unmarshalGoademoThingResponseBodyToDemoGoademoThing(v *GoademoThingResponseBody) *demo.GoademoThing {
	res := &demo.GoademoThing{
		ID:   *v.ID,
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}
