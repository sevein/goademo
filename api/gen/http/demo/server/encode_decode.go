// Code generated by goa v3.11.1, DO NOT EDIT.
//
// demo HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package server

import (
	"context"
	"net/http"
	"strconv"

	demo "github.com/sevein/goademo/api/gen/demo"
	demoviews "github.com/sevein/goademo/api/gen/demo/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeShowResponse returns an encoder for responses returned by the demo
// show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*demoviews.GoademoThing)
		enc := encoder(ctx, w)
		body := NewShowResponseBodyExtended(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the demo show
// endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  uint
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(id)

		return payload, nil
	}
}

// EncodePlainList0Response returns an encoder for responses returned by the
// demo plain-list-0 endpoint.
func EncodePlainList0Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(demoviews.GoademoThingCollection)
		enc := encoder(ctx, w)
		body := NewGoademoThingResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodePlainList1Response returns an encoder for responses returned by the
// demo plain-list-1 endpoint.
func EncodePlainList1Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(demoviews.GoademoThingCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGoademoThingResponseCollection(res.Projected)
		case "extended":
			body = NewGoademoThingResponseExtendedCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeList0Response returns an encoder for responses returned by the demo
// list0 endpoint.
func EncodeList0Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*demo.List0Result)
		enc := encoder(ctx, w)
		body := NewList0ResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeList1Response returns an encoder for responses returned by the demo
// list1 endpoint.
func EncodeList1Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*demo.List1Result)
		enc := encoder(ctx, w)
		body := NewList1ResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeList2Response returns an encoder for responses returned by the demo
// list2 endpoint.
func EncodeList2Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*demo.List2Result)
		enc := encoder(ctx, w)
		body := NewList2ResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeList3Response returns an encoder for responses returned by the demo
// list3 endpoint.
func EncodeList3Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*demo.List3Result)
		enc := encoder(ctx, w)
		body := NewList3ResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalDemoviewsGoademoThingViewToGoademoThingResponse builds a value of
// type *GoademoThingResponse from a value of type *demoviews.GoademoThingView.
func marshalDemoviewsGoademoThingViewToGoademoThingResponse(v *demoviews.GoademoThingView) *GoademoThingResponse {
	res := &GoademoThingResponse{
		ID:   *v.ID,
		Name: v.Name,
	}

	return res
}

// marshalDemoviewsGoademoThingViewToGoademoThingResponseExtended builds a
// value of type *GoademoThingResponseExtended from a value of type
// *demoviews.GoademoThingView.
func marshalDemoviewsGoademoThingViewToGoademoThingResponseExtended(v *demoviews.GoademoThingView) *GoademoThingResponseExtended {
	res := &GoademoThingResponseExtended{
		ID:   *v.ID,
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}

// marshalDemoGoademoThingToGoademoThingResponseBody builds a value of type
// *GoademoThingResponseBody from a value of type *demo.GoademoThing.
func marshalDemoGoademoThingToGoademoThingResponseBody(v *demo.GoademoThing) *GoademoThingResponseBody {
	res := &GoademoThingResponseBody{
		ID:   v.ID,
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}
