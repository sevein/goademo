// Code generated by goa v3.11.1, DO NOT EDIT.
//
// demo HTTP server types
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package server

import (
	demo "github.com/sevein/goademo/api/gen/demo"
	demoviews "github.com/sevein/goademo/api/gen/demo/views"
)

// ShowResponseBodyExtended is the type of the "demo" service "show" endpoint
// HTTP response body.
type ShowResponseBodyExtended struct {
	ID   int     `form:"id" json:"id" xml:"id"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Age  *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
}

// GoademoThingResponseCollection is the type of the "demo" service
// "plain-list-0" endpoint HTTP response body.
type GoademoThingResponseCollection []*GoademoThingResponse

// GoademoThingResponseExtendedCollection is the type of the "demo" service
// "plain-list-1" endpoint HTTP response body.
type GoademoThingResponseExtendedCollection []*GoademoThingResponseExtended

// List0ResponseBody is the type of the "demo" service "list0" endpoint HTTP
// response body.
type List0ResponseBody struct {
	Items GoademoThingCollectionResponseBody `form:"items" json:"items" xml:"items"`
}

// List1ResponseBody is the type of the "demo" service "list1" endpoint HTTP
// response body.
type List1ResponseBody struct {
	Items GoademoThingCollectionResponseBody `form:"items" json:"items" xml:"items"`
}

// List2ResponseBody is the type of the "demo" service "list2" endpoint HTTP
// response body.
type List2ResponseBody struct {
	Items GoademoThingCollectionResponseBody `form:"items" json:"items" xml:"items"`
}

// List3ResponseBody is the type of the "demo" service "list3" endpoint HTTP
// response body.
type List3ResponseBody struct {
	Items GoademoThingCollectionResponseBody `form:"items" json:"items" xml:"items"`
}

// GoademoThingResponse is used to define fields on response body types.
type GoademoThingResponse struct {
	ID   int     `form:"id" json:"id" xml:"id"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GoademoThingResponseExtended is used to define fields on response body types.
type GoademoThingResponseExtended struct {
	ID   int     `form:"id" json:"id" xml:"id"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Age  *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
}

// GoademoThingCollectionResponseBody is used to define fields on response body
// types.
type GoademoThingCollectionResponseBody []*GoademoThingResponseBody

// GoademoThingResponseBody is used to define fields on response body types.
type GoademoThingResponseBody struct {
	ID   int     `form:"id" json:"id" xml:"id"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Age  *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
}

// NewShowResponseBodyExtended builds the HTTP response body from the result of
// the "show" endpoint of the "demo" service.
func NewShowResponseBodyExtended(res *demoviews.GoademoThingView) *ShowResponseBodyExtended {
	body := &ShowResponseBodyExtended{
		ID:   *res.ID,
		Name: res.Name,
		Age:  res.Age,
	}
	return body
}

// NewGoademoThingResponseCollection builds the HTTP response body from the
// result of the "plain-list-0" endpoint of the "demo" service.
func NewGoademoThingResponseCollection(res demoviews.GoademoThingCollectionView) GoademoThingResponseCollection {
	body := make([]*GoademoThingResponse, len(res))
	for i, val := range res {
		body[i] = marshalDemoviewsGoademoThingViewToGoademoThingResponse(val)
	}
	return body
}

// NewGoademoThingResponseExtendedCollection builds the HTTP response body from
// the result of the "plain-list-1" endpoint of the "demo" service.
func NewGoademoThingResponseExtendedCollection(res demoviews.GoademoThingCollectionView) GoademoThingResponseExtendedCollection {
	body := make([]*GoademoThingResponseExtended, len(res))
	for i, val := range res {
		body[i] = marshalDemoviewsGoademoThingViewToGoademoThingResponseExtended(val)
	}
	return body
}

// NewList0ResponseBody builds the HTTP response body from the result of the
// "list0" endpoint of the "demo" service.
func NewList0ResponseBody(res *demo.List0Result) *List0ResponseBody {
	body := &List0ResponseBody{}
	if res.Items != nil {
		body.Items = make([]*GoademoThingResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDemoGoademoThingToGoademoThingResponseBody(val)
		}
	}
	return body
}

// NewList1ResponseBody builds the HTTP response body from the result of the
// "list1" endpoint of the "demo" service.
func NewList1ResponseBody(res *demo.List1Result) *List1ResponseBody {
	body := &List1ResponseBody{}
	if res.Items != nil {
		body.Items = make([]*GoademoThingResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDemoGoademoThingToGoademoThingResponseBody(val)
		}
	}
	return body
}

// NewList2ResponseBody builds the HTTP response body from the result of the
// "list2" endpoint of the "demo" service.
func NewList2ResponseBody(res *demo.List2Result) *List2ResponseBody {
	body := &List2ResponseBody{}
	if res.Items != nil {
		body.Items = make([]*GoademoThingResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDemoGoademoThingToGoademoThingResponseBody(val)
		}
	}
	return body
}

// NewList3ResponseBody builds the HTTP response body from the result of the
// "list3" endpoint of the "demo" service.
func NewList3ResponseBody(res *demo.List3Result) *List3ResponseBody {
	body := &List3ResponseBody{}
	if res.Items != nil {
		body.Items = make([]*GoademoThingResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDemoGoademoThingToGoademoThingResponseBody(val)
		}
	}
	return body
}

// NewShowPayload builds a demo service show endpoint payload.
func NewShowPayload(id uint) *demo.ShowPayload {
	v := &demo.ShowPayload{}
	v.ID = id

	return v
}
