// Code generated by goa v3.11.1, DO NOT EDIT.
//
// demo views
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// GoademoThing is the viewed result type that is projected based on a view.
type GoademoThing struct {
	// Type to project
	Projected *GoademoThingView
	// View to render
	View string
}

// GoademoThingCollection is the viewed result type that is projected based on
// a view.
type GoademoThingCollection struct {
	// Type to project
	Projected GoademoThingCollectionView
	// View to render
	View string
}

// GoademoThingView is a type that runs validations on a projected type.
type GoademoThingView struct {
	ID   *int
	Name *string
	Age  *int
}

// GoademoThingCollectionView is a type that runs validations on a projected
// type.
type GoademoThingCollectionView []*GoademoThingView

var (
	// GoademoThingMap is a map indexing the attribute names of GoademoThing by
	// view name.
	GoademoThingMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
		"extended": {
			"id",
			"name",
			"age",
		},
	}
	// GoademoThingCollectionMap is a map indexing the attribute names of
	// GoademoThingCollection by view name.
	GoademoThingCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
		"extended": {
			"id",
			"name",
			"age",
		},
	}
)

// ValidateGoademoThing runs the validations defined on the viewed result type
// GoademoThing.
func ValidateGoademoThing(result *GoademoThing) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoademoThingView(result.Projected)
	case "extended":
		err = ValidateGoademoThingViewExtended(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended"})
	}
	return
}

// ValidateGoademoThingCollection runs the validations defined on the viewed
// result type GoademoThingCollection.
func ValidateGoademoThingCollection(result GoademoThingCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoademoThingCollectionView(result.Projected)
	case "extended":
		err = ValidateGoademoThingCollectionViewExtended(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended"})
	}
	return
}

// ValidateGoademoThingView runs the validations defined on GoademoThingView
// using the "default" view.
func ValidateGoademoThingView(result *GoademoThingView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	return
}

// ValidateGoademoThingViewExtended runs the validations defined on
// GoademoThingView using the "extended" view.
func ValidateGoademoThingViewExtended(result *GoademoThingView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	return
}

// ValidateGoademoThingCollectionView runs the validations defined on
// GoademoThingCollectionView using the "default" view.
func ValidateGoademoThingCollectionView(result GoademoThingCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoademoThingView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoademoThingCollectionViewExtended runs the validations defined on
// GoademoThingCollectionView using the "extended" view.
func ValidateGoademoThingCollectionViewExtended(result GoademoThingCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoademoThingViewExtended(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
