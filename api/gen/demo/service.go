// Code generated by goa v3.11.1, DO NOT EDIT.
//
// demo service
//
// Command:
// $ goa gen github.com/sevein/goademo/design -o api

package demo

import (
	"context"

	demoviews "github.com/sevein/goademo/api/gen/demo/views"
)

// Service is the demo service interface.
type Service interface {
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *GoademoThing, err error)
	// PlainList0 implements plain-list-0.
	PlainList0(context.Context) (res GoademoThingCollection, err error)
	// PlainList1 implements plain-list-1.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	PlainList1(context.Context) (res GoademoThingCollection, view string, err error)
	// List0 implements list0.
	List0(context.Context) (res *List0Result, err error)
	// List1 implements list1.
	List1(context.Context) (res *List1Result, err error)
	// List2 implements list2.
	List2(context.Context) (res *List2Result, err error)
	// List3 implements list3.
	List3(context.Context) (res *List3Result, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "demo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"show", "plain-list-0", "plain-list-1", "list0", "list1", "list2", "list3"}

// GoademoThing is the result type of the demo service show method.
type GoademoThing struct {
	ID   int
	Name *string
	Age  *int
}

// GoademoThingCollection is the result type of the demo service plain-list-0
// method.
type GoademoThingCollection []*GoademoThing

// List0Result is the result type of the demo service list0 method.
type List0Result struct {
	Items GoademoThingCollection
}

// List1Result is the result type of the demo service list1 method.
type List1Result struct {
	Items GoademoThingCollection
}

// List2Result is the result type of the demo service list2 method.
type List2Result struct {
	Items GoademoThingCollection
}

// List3Result is the result type of the demo service list3 method.
type List3Result struct {
	Items GoademoThingCollection
}

// ShowPayload is the payload type of the demo service show method.
type ShowPayload struct {
	ID uint
}

// NewGoademoThing initializes result type GoademoThing from viewed result type
// GoademoThing.
func NewGoademoThing(vres *demoviews.GoademoThing) *GoademoThing {
	var res *GoademoThing
	switch vres.View {
	case "default", "":
		res = newGoademoThing(vres.Projected)
	case "extended":
		res = newGoademoThingExtended(vres.Projected)
	}
	return res
}

// NewViewedGoademoThing initializes viewed result type GoademoThing from
// result type GoademoThing using the given view.
func NewViewedGoademoThing(res *GoademoThing, view string) *demoviews.GoademoThing {
	var vres *demoviews.GoademoThing
	switch view {
	case "default", "":
		p := newGoademoThingView(res)
		vres = &demoviews.GoademoThing{Projected: p, View: "default"}
	case "extended":
		p := newGoademoThingViewExtended(res)
		vres = &demoviews.GoademoThing{Projected: p, View: "extended"}
	}
	return vres
}

// NewGoademoThingCollection initializes result type GoademoThingCollection
// from viewed result type GoademoThingCollection.
func NewGoademoThingCollection(vres demoviews.GoademoThingCollection) GoademoThingCollection {
	var res GoademoThingCollection
	switch vres.View {
	case "default", "":
		res = newGoademoThingCollection(vres.Projected)
	case "extended":
		res = newGoademoThingCollectionExtended(vres.Projected)
	}
	return res
}

// NewViewedGoademoThingCollection initializes viewed result type
// GoademoThingCollection from result type GoademoThingCollection using the
// given view.
func NewViewedGoademoThingCollection(res GoademoThingCollection, view string) demoviews.GoademoThingCollection {
	var vres demoviews.GoademoThingCollection
	switch view {
	case "default", "":
		p := newGoademoThingCollectionView(res)
		vres = demoviews.GoademoThingCollection{Projected: p, View: "default"}
	case "extended":
		p := newGoademoThingCollectionViewExtended(res)
		vres = demoviews.GoademoThingCollection{Projected: p, View: "extended"}
	}
	return vres
}

// newGoademoThing converts projected type GoademoThing to service type
// GoademoThing.
func newGoademoThing(vres *demoviews.GoademoThingView) *GoademoThing {
	res := &GoademoThing{
		Name: vres.Name,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newGoademoThingExtended converts projected type GoademoThing to service type
// GoademoThing.
func newGoademoThingExtended(vres *demoviews.GoademoThingView) *GoademoThing {
	res := &GoademoThing{
		Name: vres.Name,
		Age:  vres.Age,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newGoademoThingView projects result type GoademoThing to projected type
// GoademoThingView using the "default" view.
func newGoademoThingView(res *GoademoThing) *demoviews.GoademoThingView {
	vres := &demoviews.GoademoThingView{
		ID:   &res.ID,
		Name: res.Name,
	}
	return vres
}

// newGoademoThingViewExtended projects result type GoademoThing to projected
// type GoademoThingView using the "extended" view.
func newGoademoThingViewExtended(res *GoademoThing) *demoviews.GoademoThingView {
	vres := &demoviews.GoademoThingView{
		ID:   &res.ID,
		Name: res.Name,
		Age:  res.Age,
	}
	return vres
}

// newGoademoThingCollection converts projected type GoademoThingCollection to
// service type GoademoThingCollection.
func newGoademoThingCollection(vres demoviews.GoademoThingCollectionView) GoademoThingCollection {
	res := make(GoademoThingCollection, len(vres))
	for i, n := range vres {
		res[i] = newGoademoThing(n)
	}
	return res
}

// newGoademoThingCollectionExtended converts projected type
// GoademoThingCollection to service type GoademoThingCollection.
func newGoademoThingCollectionExtended(vres demoviews.GoademoThingCollectionView) GoademoThingCollection {
	res := make(GoademoThingCollection, len(vres))
	for i, n := range vres {
		res[i] = newGoademoThingExtended(n)
	}
	return res
}

// newGoademoThingCollectionView projects result type GoademoThingCollection to
// projected type GoademoThingCollectionView using the "default" view.
func newGoademoThingCollectionView(res GoademoThingCollection) demoviews.GoademoThingCollectionView {
	vres := make(demoviews.GoademoThingCollectionView, len(res))
	for i, n := range res {
		vres[i] = newGoademoThingView(n)
	}
	return vres
}

// newGoademoThingCollectionViewExtended projects result type
// GoademoThingCollection to projected type GoademoThingCollectionView using
// the "extended" view.
func newGoademoThingCollectionViewExtended(res GoademoThingCollection) demoviews.GoademoThingCollectionView {
	vres := make(demoviews.GoademoThingCollectionView, len(res))
	for i, n := range res {
		vres[i] = newGoademoThingViewExtended(n)
	}
	return vres
}
